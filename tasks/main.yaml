---
- name: set Arch vars
  set_fact:
    # per-interface systemd service supported
    config_file: "{{ wpa_supplicant_interface }}.conf"
    service_name: "wpa_supplicant@{{ wpa_supplicant_interface }}.service"
    wpa_supplicant_package: wpa_supplicant
  when: ansible_facts['os_family'] == "Arch"

- name: set RedHat vars
  set_fact:
    config_file: wpa_supplicant.conf
    service_name: wpa_supplicant.service
    wpa_supplicant_package: wpa_supplicant
  when: ansible_facts['os_family'] == "RedHat"

- name: set Debian vars
  set_fact:
    # per-interface systemd service supported
    config_file: "wpa_supplicant-{{ wpa_supplicant_interface }}.conf"
    service_name: "wpa_supplicant@{{ wpa_supplicant_interface }}.service"
    wpa_supplicant_package: wpasupplicant
  when: ansible_facts['os_family'] == "Debian"

- name: wpa_supplicant installed
  package:
    name: "{{ wpa_supplicant_package }}"
    update_cache: true

- name: disable handler for Docker testing
  set_fact:
    handler_enabled: true
  tags: molecule-notest

- name: wpa_supplicant configuration
  template:
    dest: "/etc/wpa_supplicant/{{ config_file }}"
    src: templates/wpa_supplicant.conf.j2
    owner: root
    group: root
    mode: 0640
    # wpa_supplicant doesn't have option to check config
    # everything that follows is an ugly workaround
    # validate (as of ansible 2.12) only:
    #  - checks the exit code for success or failure
    #  - populates stdout on failure
    # and we are interested in content of stdout for validation
    validate: sh -c 'if wpa_supplicant -c %s -i NaN | grep -C10 "Failed to read or parse"; then exit 1; fi'
  register: status
  failed_when:
    -  status.stdout is defined and 'Failed to read or parse' in status.stdout
  notify:
    - restart wpa_supplicant

- name: RedHat sysconfig interfaces option
  lineinfile:
    dest: /etc/sysconfig/wpa_supplicant
    line: 'INTERFACES="-i {{ wpa_supplicant_interface }}"'
    regexp: '^#?INTERFACES='
    owner: root
    group: root
    mode: 0640
  when: ansible_facts['os_family'] == "RedHat"

- name: RedHat sysconfig drivers option
  lineinfile:
    dest: /etc/sysconfig/wpa_supplicant
    line: 'DRIVERS="-D {{ wpa_supplicant_drivers }}"'
    regexp: '^#?DRIVERS='
    owner: root
    group: root
    mode: 0640
  when: ansible_facts['os_family'] == "RedHat"

- name: wpa_supplicant service
  systemd:
    daemon_reload: true
    name: "wpa_supplicant@{{ wpa_supplicant_interface }}.service"
    state: started
    enabled: true
  # requires fully operational systemd in Docker
  tags: molecule-notest
